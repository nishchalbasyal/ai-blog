<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Nishchal Basyal</title>
<link>https://nishchalbasyal.github.io/ai-blog/</link>
<atom:link href="https://nishchalbasyal.github.io/ai-blog/index.xml" rel="self" type="application/rss+xml"/>
<description>This is my persanal Data Science and AI Blog.</description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Sun, 05 May 2024 19:51:16 GMT</lastBuildDate>
<item>
  <title>Confidence Intervals Using Z-Procedure and T-Procedure on Titanic Datasets </title>
  <dc:creator>Nishchal Basyal</dc:creator>
  <link>https://nishchalbasyal.github.io/ai-blog/posts/Confidence Interval/</link>
  <description><![CDATA[ 





<section id="what-is-confidence-intervals" class="level3">
<h3 class="anchored" data-anchor-id="what-is-confidence-intervals">What is Confidence Intervals ?</h3>
<p>
Confidence Intervals, in simple words, represent a range of values where we anticipate particular population parameters (e.g., Mean) to fall.
</p>
<p>
<b>Confidence Levels</b> indicate how confident we are that the true values lie within the interval, denoted by a percentage, e.g., 95%.
</p>
<p><code><b>Confidence Interval = Point Estimate ± Margin of Error</b></code></p>
<p>
<u><b>There are two ways to obtain Confidence Intervals:</b></u>
</p>
<ul>
<li>
Z-Procedure (Sigma Known)
</li>
<li>
T-Procedure
</li>
</ul>
<hr>
</section>
<section id="z--procedure" class="level2">
<h2 class="anchored" data-anchor-id="z--procedure">Z- Procedure</h2>
<p>
This method is used for populations whose variance is known.
</p>
<br> <b><u>Assumptions</u></b>:
<ul>
<li>
Must Have Population Standard Deviation
</li>
<li>
Random Sampling
</li>
<li>
Population Distribution must be a Normal Distribution or follow Central Limit Theorem
</li>
</ul>
<p>Formula: <img src="https://latex.codecogs.com/png.latex?%20C.I%20=%20%5Cbar%7BX%7D%20%5Cpm%20Z_%7B%5Calpha%20/%202%7D%20%5Ctimes%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7Bn%7D%7D%20"></p>
<table class="table">
<thead>
<tr class="header">
<th><strong>Where:</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D"></td>
<td>Point of Estimation or Mean of samples</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?Z_%7B%5Calpha%20/%202%7D"></td>
<td>Z-value for Confidence Level</td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Csigma"></td>
<td>Standard Deviation of population</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?n"></td>
<td>Sample Size</td>
</tr>
</tbody>
</table>
<p>We mostly estimated using a 95% confidence level for our estimations, allowing us to formulate the following formula: <img src="https://latex.codecogs.com/png.latex?%20C.I%20=%20%5Cbar%7BX%7D%20%5Cpm%201.96%20%5Ctimes%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7Bn%7D%7D%20"></p>
<p>We Use a Salary Dataset for Demonstration. Let’s Take Salary Column To Predict our Population Parameters.</p>
<div id="bb7e3c82-f5ee-4709-97ad-29dbb002791f" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stats</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="2befc01d-3df4-49ac-bfcb-730b38636826" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary.csv'</span>)</span></code></pre></div>
</div>
<div id="11a3dc2b-d884-4e48-af16-e985c05f7869" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Gender</th>
<th data-quarto-table-cell-role="th">Education Level</th>
<th data-quarto-table-cell-role="th">Job Title</th>
<th data-quarto-table-cell-role="th">Years of Experience</th>
<th data-quarto-table-cell-role="th">Salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>32.0</td>
<td>Male</td>
<td>Bachelor's</td>
<td>Software Engineer</td>
<td>5.0</td>
<td>90000.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>28.0</td>
<td>Female</td>
<td>Master's</td>
<td>Data Analyst</td>
<td>3.0</td>
<td>65000.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>45.0</td>
<td>Male</td>
<td>PhD</td>
<td>Senior Manager</td>
<td>15.0</td>
<td>150000.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>36.0</td>
<td>Female</td>
<td>Bachelor's</td>
<td>Sales Associate</td>
<td>7.0</td>
<td>60000.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>52.0</td>
<td>Male</td>
<td>Master's</td>
<td>Director</td>
<td>20.0</td>
<td>200000.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<p>Let’s check the Distribution of Salary</p>
<div id="40e2034e-0721-40e4-a312-169556fe3779" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>].describe())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>count       373.000000
mean     100577.345845
std       48240.013482
min         350.000000
25%       55000.000000
50%       95000.000000
75%      140000.000000
max      250000.000000
Name: Salary, dtype: float64</code></pre>
</div>
</div>
<div id="5c08a2f3-60bc-4d74-a6fd-d9ba22ada925" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>].plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kde'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Confidence Interval/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s be more Clear by Using QQPlot</p>
<div id="f4fe13ed-f4b3-4a6c-8041-d349b136b1c4" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">stats.probplot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm'</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb7-2">plt.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Confidence Interval/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="e193f3da-0961-486e-8972-f79a23365771" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>].skew()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>0.400578053273342</code></pre>
</div>
</div>
<p>Now Let’s check through central limit theorem.</p>
<div id="5601b611-952d-4e9b-9272-e231a87b780e" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">sample_salary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb10-3">    sample_salary.append(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>].dropna().sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>).values.tolist())</span></code></pre></div>
</div>
<div id="948bd94a-7713-4418-96ff-395cfaa7309c" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">sample_salary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(sample_salary)</span></code></pre></div>
</div>
<div id="d056784b-90ed-47aa-81f1-3d189adb35c2" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">sample_salary.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>(10, 50)</code></pre>
</div>
</div>
<div id="4c5fff0e-9518-4c80-89ad-42e3f06e8719" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">sample_means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sample_salary, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="05509876-d640-4a73-81a6-18db286cfd40" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<div id="9f17eca5-4a97-454b-adba-937586aced0e" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">sns.kdeplot(sample_means)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Confidence Interval/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now it’s approximately follow normal distribution.</p>
<p>Now all Conditions Satisfy. <br> Let’s Calculate Confidence Intervals using Z- Procedure.</p>
<div id="21e3cc19-c037-4db9-8439-90490b93764e" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note in Z_Procedure We have to know the Standard Deviation of Population</span></span>
<span id="cb17-2">standard_deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>])</span></code></pre></div>
</div>
<div id="96736823-f2fe-438d-90d6-4af1beb29684" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">standard_deviation</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>48175.30518517429</code></pre>
</div>
</div>
<div id="d47d58d9-aebc-4e34-ae65-df402a2eb298" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">lower_limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sample_means) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.96</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (standard_deviation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb20-2">upper_limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sample_means) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.96</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (standard_deviation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span></code></pre></div>
</div>
<div id="9a4fd8d7-21cc-497b-b320-37255580e9b5" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Range is  :"</span>,lower_limit,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>,upper_limit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The Range is  : 90027.88668699007 - 116734.91331300992</code></pre>
</div>
</div>
<p>At a 95% confidence level, the range for the confidence interval is [84058.58668699008 - 110765.61331300993].</p>
<p>This statement indicates that we are 95% confident that the true population parameter falls within the range of 84058.58668699008 to 110765.61331300993.</p>
<div id="1265d348-7504-4d8a-9708-14ba8ad7c86d" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To verify</span></span>
<span id="cb23-2">population_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>].mean()</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The actual population mean:"</span> ,population_mean,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lies within a confident interval range"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> population_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> lower_limit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> population_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> upper_limit <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"False"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The actual population mean: 100577.34584450402 lies within a confident interval range</code></pre>
</div>
</div>
<hr>
</section>
<section id="t--procedure" class="level2">
<h2 class="anchored" data-anchor-id="t--procedure">T- Procedure</h2>
<p>This method is used for populations whose variance is unknown, and it’s a commonly employed procedure for estimating population parameters.</p>
<section id="assumptions" class="level3">
<h3 class="anchored" data-anchor-id="assumptions">Assumptions:</h3>
<ul>
<li>Random Sampling.</li>
<li>Population Distribution must be a Normal Distribution or follow Central Limit Theorem.</li>
<li>Independent Observations.</li>
<li>We don’t know the standard deviation of Salaries</li>
</ul>
<p>Formula: <img src="https://latex.codecogs.com/png.latex?%20C.I%20=%20%5Cbar%7BX%7D%20%5Cpm%20t_%7B%5Calpha%20/%202%7D%20%5Ctimes%20%5Cfrac%7BS%7D%7B%5Csqrt%7Bn%7D%7D%20"></p>
<table class="table">
<thead>
<tr class="header">
<th><strong>Where:</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D"></td>
<td>Point of estimation or Mean of samples</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?t_%7B%5Calpha%20/%202%7D"></td>
<td>t-value for confidence Level</td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?S"></td>
<td>Sample mean of Standard Deviation</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?n"></td>
<td>Sample size</td>
</tr>
</tbody>
</table>
<p><strong>Note:</strong> <img src="https://latex.codecogs.com/png.latex?t_%7B%5Calpha%20/%202%7D"> t-value for confidence Level which depends on degree of freedom (n-1)</p>
<p>For example, if we aim for a 95% confidence level and have a sample size of 40 for estimation, we can formulate the following formula (From T-table): <img src="https://latex.codecogs.com/png.latex?%20C.I%20=%20%5Cbar%7BX%7D%20%5Cpm%202.021%20%5Ctimes%20%5Cfrac%7B%5Csigma%7D%7B%5Csqrt%7Bn%7D%7D%20"></p>
<div id="f61f782f-69a1-49ac-ba21-fc101cfb5279" class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># samples were created by using 40 sample size of each</span></span>
<span id="cb25-2">sample_salary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb25-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb25-4">    sample_salary.append(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>].dropna().sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>).values.tolist())</span>
<span id="cb25-5">    </span>
<span id="cb25-6">sample_salary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(sample_salary)</span>
<span id="cb25-7"></span>
<span id="cb25-8">sample_means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sample_salary,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean of each 10 samples</span></span>
<span id="cb25-9"></span>
<span id="cb25-10">sample_salary_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(sample_salary,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standard deviation of each 10 samples</span></span>
<span id="cb25-11"></span>
<span id="cb25-12">sample_mean_of_standard_deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sample_salary) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean of all sample standard deviations</span></span></code></pre></div>
</div>
<div id="1118f21b-2ad3-4723-9244-8efc4c2dcd39" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By Using formula</span></span>
<span id="cb26-2">lower_limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sample_means) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.021</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (sample_mean_of_standard_deviation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb26-3">upper_limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sample_means) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.021</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (sample_mean_of_standard_deviation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span></code></pre></div>
</div>
<div id="2ccd62db-bd35-4421-a3d1-6e997e9f9e7f" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Range is  :"</span>,lower_limit,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>,upper_limit)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The Range is  : 68743.83817322378 - 133309.66182677622</code></pre>
</div>
</div>
<div id="bb82b339-cb7d-4d68-9931-aad26388c921" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To verify</span></span>
<span id="cb29-2">population_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>].mean()</span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The actual population mean:"</span> ,population_mean,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lies within a calculated confident interval range: "</span>,lower_limit,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>,upper_limit) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> population_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> lower_limit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> population_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> upper_limit <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"False"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The actual population mean: 100577.34584450402 lies within a calculated confident interval range:  68743.83817322378 - 133309.66182677622</code></pre>
</div>
</div>
<div id="68d0692e-d812-4df6-98f1-11df6b8275ae" class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb31-2">plt.errorbar(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.mean(sample_means), yerr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.021</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (sample_mean_of_standard_deviation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)), fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Salary with Confidence Interval'</span>)</span>
<span id="cb31-3">plt.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.ones_like(sample_means), y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_means, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sampled Means'</span>)</span>
<span id="cb31-4">plt.errorbar(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lower_limit, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lower Limit'</span>)</span>
<span id="cb31-5">plt.errorbar(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>upper_limit, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purple'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Upper Limit'</span>)</span>
<span id="cb31-6">plt.xticks([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Means'</span>])</span>
<span id="cb31-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Salary'</span>)</span>
<span id="cb31-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sampled Means with Confidence Interval'</span>)</span>
<span id="cb31-9">plt.legend()</span>
<span id="cb31-10">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Confidence Interval/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://nishchalbasyal.github.io/ai-blog/posts/Confidence Interval/</guid>
  <pubDate>Sun, 05 May 2024 19:51:16 GMT</pubDate>
</item>
<item>
  <title>Feature Engineering : FunctionTransformer and PowerTransformer</title>
  <dc:creator>Nishchal Basyal</dc:creator>
  <link>https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/</link>
  <description><![CDATA[ 





<div id="8bddd04b-70bd-4867-8385-21a8a2e87589" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stats</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cross_val_score</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.tree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DecisionTreeClassifier</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FunctionTransformer</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.compose <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnTransformer</span></code></pre></div>
</div>
<div id="bf02b98f-7c9c-4047-b22f-dd03273317f6" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titanic.csv'</span>,usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>])</span></code></pre></div>
</div>
<div id="361692da-d820-49e7-9957-97a29fddd382" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].fillna(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].mean(),inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="2d2f6d14-1c15-4cfb-9a82-ba662b703525" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Survived</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Fare</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>22.0</td>
<td>7.2500</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>38.0</td>
<td>71.2833</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1</td>
<td>26.0</td>
<td>7.9250</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1</td>
<td>35.0</td>
<td>53.1000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>35.0</td>
<td>8.0500</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="bbc64264-5d96-4658-b3eb-c6ca8361a444" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb5-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div id="a3070a7a-fc0e-47c4-8947-0143edf8164b" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">X_train,X_test,y_train,y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X,y,test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</div>
<div id="d091aa06-d253-4e1d-b015-8c32af576a6a" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb7-2">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb7-3">sns.histplot(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True'</span>)</span>
<span id="cb7-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb7-7">stats.probplot(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm'</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb7-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age QQ Plot'</span>)</span>
<span id="cb7-9"></span>
<span id="cb7-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="ba8d96dd-b4f2-40cb-91dc-54a492bf56c8" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb8-2">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb8-3">sns.histplot(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True'</span>)</span>
<span id="cb8-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb8-7">stats.probplot(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm'</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb8-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age QQ Plot'</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="6d64e114-47b0-4f39-acf1-51fc2ba699b2" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression()</span>
<span id="cb9-2">clf2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeClassifier()</span></code></pre></div>
</div>
<div id="ab7981b6-ceb8-4298-b45d-7f6870b1fbe7" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">clf.fit(X_train,y_train)</span>
<span id="cb10-2">clf2.fit(X_train,y_train)</span>
<span id="cb10-3"></span>
<span id="cb10-4">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf.predict(X_test)</span>
<span id="cb10-5">y_pred1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf2.predict(X_test)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy LR"</span>, accuracy_score(y_test,y_pred))</span>
<span id="cb10-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy DT"</span>, accuracy_score(y_test,y_pred1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy LR 0.6480446927374302
Accuracy DT 0.6759776536312849</code></pre>
</div>
</div>
<div id="3401368a-ea07-4af0-b36a-109525786012" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">trf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FunctionTransformer(func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.log1p)</span></code></pre></div>
</div>
<div id="2088040a-7ea6-4ae6-84b1-005d84b36b75" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">X_train_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trf.fit_transform(X_train)</span>
<span id="cb13-2">X_test_tranformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trf.transform(X_test)</span></code></pre></div>
</div>
<div id="c48f75fc-e5f5-409c-9c94-ee6500355ed0" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression()</span>
<span id="cb14-2">clf2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeClassifier()</span>
<span id="cb14-3"></span>
<span id="cb14-4">clf.fit(X_train_transformed,y_train)</span>
<span id="cb14-5">clf2.fit(X_train_transformed,y_train)</span>
<span id="cb14-6"></span>
<span id="cb14-7">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf.predict(X_test_tranformed)</span>
<span id="cb14-8">y_pred1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf2.predict(X_test_tranformed)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy LR"</span>, accuracy_score(y_test,y_pred))</span>
<span id="cb14-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy DT"</span>, accuracy_score(y_test,y_pred1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy LR 0.6815642458100558
Accuracy DT 0.6759776536312849</code></pre>
</div>
</div>
<div id="407c3b73-b6f8-446b-a66a-0ac4ed94bdb7" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">X_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trf.fit_transform(X)</span>
<span id="cb16-2"></span>
<span id="cb16-3">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression()</span>
<span id="cb16-4">clf2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeClassifier()</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LR"</span>,np.mean(cross_val_score(clf,X_transformed,y,scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>,cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb16-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DT"</span>,np.mean(cross_val_score(clf2,X_transformed,y,scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>,cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb16-8"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>LR 0.678027465667915
DT 0.6633208489388265</code></pre>
</div>
</div>
<div id="98608f12-644a-4dd4-93f0-ce6bf8e7e64e" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb18-2"></span>
<span id="cb18-3">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb18-4">stats.probplot(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"norm"</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb18-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age Before Log'</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb18-8">stats.probplot(X_transformed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm'</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb18-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age After log'</span>)</span>
<span id="cb18-10"></span>
<span id="cb18-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="0f98cee9-849e-46cc-a8df-ebf24d71b0b3" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">trf2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer([(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>,FunctionTransformer(np.log1p),[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>])],remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passthrough'</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3">X_train_transformed2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trf2.fit_transform(X_train)</span>
<span id="cb19-4">X_test_transformed2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trf2.transform(X_test)</span></code></pre></div>
</div>
<div id="e683010a-1a72-4955-a6ec-4263201b7414" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression()</span>
<span id="cb20-2">clf2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DecisionTreeClassifier()</span>
<span id="cb20-3"></span>
<span id="cb20-4">clf.fit(X_train_transformed2,y_train)</span>
<span id="cb20-5">clf2.fit(X_train_transformed2,y_train)</span>
<span id="cb20-6"></span>
<span id="cb20-7">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf.predict(X_test_transformed2)</span>
<span id="cb20-8">y_pred1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clf2.predict(X_test_transformed2)</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy LR"</span>, accuracy_score(y_test,y_pred))</span>
<span id="cb20-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy DT"</span>, accuracy_score(y_test,y_pred1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy LR 0.6703910614525139
Accuracy DT 0.6703910614525139</code></pre>
</div>
</div>
<div id="fd17083c-0319-4d69-9d90-2fe22384668d" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_transform(transform):</span>
<span id="cb22-2">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb22-3">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb22-4"></span>
<span id="cb22-5">    trf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer([(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>,FunctionTransformer(transform),[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>])],remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passthrough'</span>)</span>
<span id="cb22-6"></span>
<span id="cb22-7">    X_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trf.fit_transform(X)</span>
<span id="cb22-8"></span>
<span id="cb22-9">    clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression()</span>
<span id="cb22-10"></span>
<span id="cb22-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy'</span>,np.mean(cross_val_score(clf,X_transformed,y,scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>,cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb22-12"></span>
<span id="cb22-13">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb22-14"></span>
<span id="cb22-15">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb22-16">    stats.probplot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm'</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb22-17">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare Before Transform'</span>)</span>
<span id="cb22-18"></span>
<span id="cb22-19">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb22-20">    stats.probplot(X_transformed[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'norm'</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb22-21">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare After Transform'</span>)</span>
<span id="cb22-22"></span>
<span id="cb22-23">    plt.show()</span></code></pre></div>
</div>
<div id="5a3b15da-2d97-472f-a77d-94bad668477c" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">apply_transform(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x:x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#nothing</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy 0.6589013732833957</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-20-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="8a813540-9777-414f-a74d-491383455680" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">apply_transform(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x:x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#left skew (Square transform)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy 0.6431335830212235</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-21-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="74be42f7-d640-4a33-ae14-cd508f2577d6" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">apply_transform(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x:x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Square Root)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy 0.6589013732833957</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-22-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="c32a68d7-d232-411c-86af-f0bd7aba8c04" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">apply_transform(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00001</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Reciprocal Transform)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy 0.61729088639201</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-23-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="876d1b8e-5a13-4b57-8f02-427bd0181325" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">apply_transform(np.sin) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Custom Transform)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy 0.6195131086142323</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-24-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="power-transform" class="level3">
<h3 class="anchored" data-anchor-id="power-transform">Power Transform</h3>
<div id="4a076899-0c90-4b02-b055-7a58ef580ff4" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concrete_data.csv"</span>)</span></code></pre></div>
</div>
<div id="e557b919-60f2-4ed9-b5bf-326aeec67885" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Cement</th>
<th data-quarto-table-cell-role="th">Blast Furnace Slag</th>
<th data-quarto-table-cell-role="th">Fly Ash</th>
<th data-quarto-table-cell-role="th">Water</th>
<th data-quarto-table-cell-role="th">Superplasticizer</th>
<th data-quarto-table-cell-role="th">Coarse Aggregate</th>
<th data-quarto-table-cell-role="th">Fine Aggregate</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Strength</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>540.0</td>
<td>0.0</td>
<td>0.0</td>
<td>162.0</td>
<td>2.5</td>
<td>1040.0</td>
<td>676.0</td>
<td>28</td>
<td>79.99</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>540.0</td>
<td>0.0</td>
<td>0.0</td>
<td>162.0</td>
<td>2.5</td>
<td>1055.0</td>
<td>676.0</td>
<td>28</td>
<td>61.89</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>332.5</td>
<td>142.5</td>
<td>0.0</td>
<td>228.0</td>
<td>0.0</td>
<td>932.0</td>
<td>594.0</td>
<td>270</td>
<td>40.27</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>332.5</td>
<td>142.5</td>
<td>0.0</td>
<td>228.0</td>
<td>0.0</td>
<td>932.0</td>
<td>594.0</td>
<td>365</td>
<td>41.05</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>198.6</td>
<td>132.4</td>
<td>0.0</td>
<td>192.0</td>
<td>0.0</td>
<td>978.4</td>
<td>825.5</td>
<td>360</td>
<td>44.30</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="5752a921-6d8b-433c-a481-b257d63d099e" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>(1030, 9)</code></pre>
</div>
</div>
<div id="37e38f87-0f02-4c87-9d39-dba96bb4b160" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">df.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>Cement                0
Blast Furnace Slag    0
Fly Ash               0
Water                 0
Superplasticizer      0
Coarse Aggregate      0
Fine Aggregate        0
Age                   0
Strength              0
dtype: int64</code></pre>
</div>
</div>
<div id="55e606d4-c928-4702-9792-e4a4d12f332e" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Cement</th>
<th data-quarto-table-cell-role="th">Blast Furnace Slag</th>
<th data-quarto-table-cell-role="th">Fly Ash</th>
<th data-quarto-table-cell-role="th">Water</th>
<th data-quarto-table-cell-role="th">Superplasticizer</th>
<th data-quarto-table-cell-role="th">Coarse Aggregate</th>
<th data-quarto-table-cell-role="th">Fine Aggregate</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Strength</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>1030.000000</td>
<td>1030.000000</td>
<td>1030.000000</td>
<td>1030.000000</td>
<td>1030.000000</td>
<td>1030.000000</td>
<td>1030.000000</td>
<td>1030.000000</td>
<td>1030.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>281.167864</td>
<td>73.895825</td>
<td>54.188350</td>
<td>181.567282</td>
<td>6.204660</td>
<td>972.918932</td>
<td>773.580485</td>
<td>45.662136</td>
<td>35.817961</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>104.506364</td>
<td>86.279342</td>
<td>63.997004</td>
<td>21.354219</td>
<td>5.973841</td>
<td>77.753954</td>
<td>80.175980</td>
<td>63.169912</td>
<td>16.705742</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>102.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>121.800000</td>
<td>0.000000</td>
<td>801.000000</td>
<td>594.000000</td>
<td>1.000000</td>
<td>2.330000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>192.375000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>164.900000</td>
<td>0.000000</td>
<td>932.000000</td>
<td>730.950000</td>
<td>7.000000</td>
<td>23.710000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>272.900000</td>
<td>22.000000</td>
<td>0.000000</td>
<td>185.000000</td>
<td>6.400000</td>
<td>968.000000</td>
<td>779.500000</td>
<td>28.000000</td>
<td>34.445000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>350.000000</td>
<td>142.950000</td>
<td>118.300000</td>
<td>192.000000</td>
<td>10.200000</td>
<td>1029.400000</td>
<td>824.000000</td>
<td>56.000000</td>
<td>46.135000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>540.000000</td>
<td>359.400000</td>
<td>200.100000</td>
<td>247.000000</td>
<td>32.200000</td>
<td>1145.000000</td>
<td>992.600000</td>
<td>365.000000</td>
<td>82.600000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="d7655c43-de93-4442-b3d2-dbe51404f060" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strength'</span>])</span>
<span id="cb40-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.iloc[:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<div id="a433ac43-922e-48b4-9427-bd3be92fca67" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">X_train,X_test,y_train,y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X,y,test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</div>
<div id="2378ddb2-59d1-42b8-b309-efe7f82ff71e" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb42-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> r2_score</span>
<span id="cb42-3"></span>
<span id="cb42-4">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb42-5">lr.fit(X_train,y_train)</span>
<span id="cb42-6">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr.predict(X_test)</span>
<span id="cb42-7">r2_score(y_test,y_pred)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>0.6275531792314848</code></pre>
</div>
</div>
<div id="96700b15-53a9-49b8-ab8e-3d03b0e159bb" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb44-2">np.mean(cross_val_score(lr,X,y,scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r2'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>0.4609940491662864</code></pre>
</div>
</div>
<div id="7016f833-5105-482a-9309-4445f6f4e4b5" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> X_train.columns:</span>
<span id="cb46-2">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb46-3">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb46-4">    sns.histplot(X_train[col],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'step'</span>)</span>
<span id="cb46-5"></span>
<span id="cb46-6">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb46-7">    stats.probplot(X_train[col],dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"norm"</span>,plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt)</span>
<span id="cb46-8">    plt.title(col)</span>
<span id="cb46-9"></span>
<span id="cb46-10">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-7.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-34-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="e3664b1b-b0f2-4f7e-90dd-f5bc78ed1b2d" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PowerTransformer</span></code></pre></div>
</div>
<div id="aa6fdd0d-4264-4e73-99a6-f631e5b26e56" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Applying Box-Cox Transform</span></span>
<span id="cb48-2"></span>
<span id="cb48-3">pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PowerTransformer(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box-cox'</span>)</span>
<span id="cb48-4"></span>
<span id="cb48-5">X_train_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pt.fit_transform(X_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000001</span>)</span>
<span id="cb48-6">X_test_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pt.transform(X_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000001</span>)</span>
<span id="cb48-7"></span>
<span id="cb48-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cols'</span>:X_train.columns,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box_cox_lambdas'</span>:pt.lambdas_})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">cols</th>
<th data-quarto-table-cell-role="th">box_cox_lambdas</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Cement</td>
<td>0.177025</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Blast Furnace Slag</td>
<td>0.025093</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Fly Ash</td>
<td>-0.038970</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Water</td>
<td>0.772682</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Superplasticizer</td>
<td>0.098811</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Coarse Aggregate</td>
<td>1.129813</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Fine Aggregate</td>
<td>1.782019</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Age</td>
<td>0.066631</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="989ff3fe-4b62-4fab-8780-e803731a6a35" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb49-2">lr.fit(X_train_transformed,y_train)</span>
<span id="cb49-3"></span>
<span id="cb49-4">y_pred2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr.predict(X_test_transformed)</span>
<span id="cb49-5"></span>
<span id="cb49-6">r2_score(y_test,y_pred2)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>0.8047825007854219</code></pre>
</div>
</div>
<div id="db5b85f6-e59a-4f4b-849b-a346f7f942bb" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">X_train_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_train_transformed,columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_train.columns)</span>
<span id="cb51-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> X_train_transformed.columns:</span>
<span id="cb51-3">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb51-4">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb51-5">    sns.histplot(X_train[col],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'step'</span>)</span>
<span id="cb51-6">    plt.title(col)</span>
<span id="cb51-7"></span>
<span id="cb51-8">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb51-9">    sns.histplot(X_train_transformed[col],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'step'</span>)</span>
<span id="cb51-10">    plt.title(col)</span>
<span id="cb51-11"></span>
<span id="cb51-12">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-7.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-38-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="08cf25ab-3386-42b7-b3b8-9e9a95acefb4" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Applying Yeo-Johnson Transform</span></span>
<span id="cb52-2"></span>
<span id="cb52-3">pt1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PowerTransformer()</span>
<span id="cb52-4"></span>
<span id="cb52-5">X_train_transformed2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pt1.fit_transform(X_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000001</span>)</span>
<span id="cb52-6">X_test_transformed2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pt1.transform(X_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000001</span>)</span>
<span id="cb52-7"></span>
<span id="cb52-8">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb52-9">lr.fit(X_train_transformed2,y_train)</span>
<span id="cb52-10"></span>
<span id="cb52-11">y_pred3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr.predict(X_test_transformed2)</span>
<span id="cb52-12"></span>
<span id="cb52-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(r2_score(y_test,y_pred3))</span>
<span id="cb52-14"></span>
<span id="cb52-15"></span>
<span id="cb52-16">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cols'</span>:X_train.columns,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box_cox_lambdas'</span>:pt1.lambdas_})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.8161906545593434</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="42">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">cols</th>
<th data-quarto-table-cell-role="th">box_cox_lambdas</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Cement</td>
<td>0.174348</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Blast Furnace Slag</td>
<td>0.015715</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Fly Ash</td>
<td>-0.161447</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Water</td>
<td>0.771307</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Superplasticizer</td>
<td>0.253935</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Coarse Aggregate</td>
<td>1.130050</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Fine Aggregate</td>
<td>1.783100</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Age</td>
<td>0.019885</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="56263e05-26be-4921-b02f-20108e7d35c9" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">X_train_transformed2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_train_transformed2,columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_train.columns)</span>
<span id="cb54-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> X_train_transformed2.columns:</span>
<span id="cb54-3">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb54-4">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb54-5">    sns.histplot(X_train[col],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'step'</span>)</span>
<span id="cb54-6">    plt.title(col)</span>
<span id="cb54-7"></span>
<span id="cb54-8">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb54-9">    sns.histplot(X_train_transformed2[col],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,element<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'step'</span>)</span>
<span id="cb54-10">    plt.title(col)</span>
<span id="cb54-11"></span>
<span id="cb54-12">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-7.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/index_files/figure-html/cell-40-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="a6fc4fd6-8723-4021-9268-ade5b20ea6c5" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cols'</span>:X_train.columns,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box_cox_lambdas'</span>:pt.lambdas_,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yeo_Johnson_lambdas'</span>:pt1.lambdas_})</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">cols</th>
<th data-quarto-table-cell-role="th">box_cox_lambdas</th>
<th data-quarto-table-cell-role="th">Yeo_Johnson_lambdas</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Cement</td>
<td>0.177025</td>
<td>0.174348</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Blast Furnace Slag</td>
<td>0.025093</td>
<td>0.015715</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Fly Ash</td>
<td>-0.038970</td>
<td>-0.161447</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Water</td>
<td>0.772682</td>
<td>0.771307</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Superplasticizer</td>
<td>0.098811</td>
<td>0.253935</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Coarse Aggregate</td>
<td>1.129813</td>
<td>1.130050</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Fine Aggregate</td>
<td>1.782019</td>
<td>1.783100</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Age</td>
<td>0.066631</td>
<td>0.019885</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <guid>https://nishchalbasyal.github.io/ai-blog/posts/Feature Engineering Transformation/</guid>
  <pubDate>Sun, 05 May 2024 19:51:16 GMT</pubDate>
</item>
<item>
  <title>Univariate Analysis : Categorial and Numerical Data</title>
  <dc:creator>Nishchal Basyal</dc:creator>
  <link>https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/</link>
  <description><![CDATA[ 





<p>Univariate analysis focuses on analyzing one variable or column at a time. It provides insights into the characteristics and distribution of individual variables.</p>
<section id="types-of-graphs-for-different-types-of-data" class="level2">
<h2 class="anchored" data-anchor-id="types-of-graphs-for-different-types-of-data">Types of Graphs for Different Types of Data</h2>
<p>
<b>Categories</b>
</p>
<ul>
<li>
Countplot: A graphical representation of the frequency of categorical data.
</li>
<li>
Pie Chart: A circular statistical graphic divided into slices to illustrate numerical proportions.
</li>
</ul>
<p>
<strong>Numerical:</strong>
</p>
<ul>
<li>
Histogram: A graphical representation of the distribution of numerical data, divided into intervals.
</li>
<li>
Distplot: A plot that displays the probability density function of numerical data, providing insights into the data distribution.
</li>
<li>
Boxplot: A visual summary of the central tendency, dispersion, and skewness of numerical data through five summary statistics.
</li>
<li>
Violin Plot: Combines the features of a box plot and a kernel density plot to visualize the distribution of numerical data and compare distributions across categories.
</li>
</ul>
<div id="80a49703" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="ce86e504" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<div id="f051a641" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titanic.csv'</span>)</span></code></pre></div>
</div>
<div id="7d27c611" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">PassengerId</th>
<th data-quarto-table-cell-role="th">Survived</th>
<th data-quarto-table-cell-role="th">Pclass</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Sex</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">SibSp</th>
<th data-quarto-table-cell-role="th">Parch</th>
<th data-quarto-table-cell-role="th">Ticket</th>
<th data-quarto-table-cell-role="th">Fare</th>
<th data-quarto-table-cell-role="th">Cabin</th>
<th data-quarto-table-cell-role="th">Embarked</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>Braund, Mr. Owen Harris</td>
<td>male</td>
<td>22.0</td>
<td>1</td>
<td>0</td>
<td>A/5 21171</td>
<td>7.2500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>1</td>
<td>1</td>
<td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
<td>female</td>
<td>38.0</td>
<td>1</td>
<td>0</td>
<td>PC 17599</td>
<td>71.2833</td>
<td>C85</td>
<td>C</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>1</td>
<td>3</td>
<td>Heikkinen, Miss. Laina</td>
<td>female</td>
<td>26.0</td>
<td>0</td>
<td>0</td>
<td>STON/O2. 3101282</td>
<td>7.9250</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>1</td>
<td>1</td>
<td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
<td>female</td>
<td>35.0</td>
<td>1</td>
<td>0</td>
<td>113803</td>
<td>53.1000</td>
<td>C123</td>
<td>S</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>Allen, Mr. William Henry</td>
<td>male</td>
<td>35.0</td>
<td>0</td>
<td>0</td>
<td>373450</td>
<td>8.0500</td>
<td>NaN</td>
<td>S</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="91cfe4d7" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 891 entries, 0 to 890
Data columns (total 12 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   PassengerId  891 non-null    int64  
 1   Survived     891 non-null    int64  
 2   Pclass       891 non-null    int64  
 3   Name         891 non-null    object 
 4   Sex          891 non-null    object 
 5   Age          714 non-null    float64
 6   SibSp        891 non-null    int64  
 7   Parch        891 non-null    int64  
 8   Ticket       891 non-null    object 
 9   Fare         891 non-null    float64
 10  Cabin        204 non-null    object 
 11  Embarked     889 non-null    object 
dtypes: float64(2), int64(5), object(5)
memory usage: 83.7+ KB</code></pre>
</div>
</div>
<div id="92d58867" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(891, 12)</code></pre>
</div>
</div>
</section>
<section id="categorical" class="level2">
<h2 class="anchored" data-anchor-id="categorical">Categorical</h2>
<section id="countplot" class="level3">
<h3 class="anchored" data-anchor-id="countplot">Countplot</h3>
<p>Countplot gives the occurrence (frequency) of categorical data. For example, in Titanic data, it shows the total number of passengers who survived (1) and those who did not survive (0).</p>
<p>The sum of all categorical counts will be equal to the total number of rows.</p>
<div id="064e77c5" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">sns.countplot(df,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survived"</span>)</span>
<span id="cb9-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This graph denotes that the total number of deaths is over 500, and the number of survivors is over 340, totaling around 850 people (which is the actual size of the dataset).</p>
<p>Summary: More people died than survived.</p>
<div id="df1479d9" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">sns.countplot(df,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pclass"</span>)</span>
<span id="cb10-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Graph Description: The majority of people traveled in 3rd class, while the least number of people traveled in 2nd class.</p>
<div id="e6a84bca" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">sns.countplot(df,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>)</span>
<span id="cb11-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Graph Description: In the journey, the majority of people are male.</p>
<div id="396d103e" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">sns.countplot(df,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Embarked"</span>)</span>
<span id="cb12-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Graph Description: Most people departed from Southampton (S), followed by Cherbourg (C) and Queenstown (Q).</p>
</section>
<section id="pie-chart" class="level3">
<h3 class="anchored" data-anchor-id="pie-chart">Pie Chart</h3>
<p>A pie chart is ideal for displaying categorical data in percentages, dividing a circle into sectors to represent proportions visually. It effectively showcases relative proportions within a dataset and is easy to understand.</p>
<div id="69274412" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>].value_counts().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pie'</span>,autopct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="072cba13" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked'</span>].value_counts().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pie'</span>,autopct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="numerical-data" class="level2">
<h2 class="anchored" data-anchor-id="numerical-data">Numerical Data</h2>
<section id="histogram" class="level3">
<h3 class="anchored" data-anchor-id="histogram">Histogram</h3>
<p>A histogram is used to analyze the distribution of continuous data. It provides insights into how data is spread across different ranges or bins, aiding in understanding its central tendency and variability. While histograms are typically used for continuous data, they can also be adapted to represent categorical data by grouping values into intervals.</p>
<div id="3399a585" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">plt.hist(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>],bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(array([ 44.,  24.,  32., 104., 115., 127.,  80.,  59.,  49.,  30.,  22.,
         17.,   4.,   6.,   1.]),
 array([ 0.42      ,  5.72533333, 11.03066667, 16.336     , 21.64133333,
        26.94666667, 32.252     , 37.55733333, 42.86266667, 48.168     ,
        53.47333333, 58.77866667, 64.084     , 69.38933333, 74.69466667,
        80.        ]),
 &lt;BarContainer object of 15 artists&gt;)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-14-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From this graph, we can see that individuals aged between 18 and 32 are the most frequent travelers on the ship. The age distribution ranges from a minimum of 0 to a maximum of 80, with data divided into 15 bins.</p>
</section>
<section id="distplothistplot" class="level3">
<h3 class="anchored" data-anchor-id="distplothistplot">distplot/Histplot</h3>
<p>This plot displays the probability density function rather than the total count, as seen in a traditional histogram. It provides a visual representation of the distribution of data, focusing on the probability of occurrence for different values rather than their frequency.</p>
<div id="f3da2c59" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">sns.histplot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>],kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, stat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This graph illustrates the probability of specific ages. For instance, it answers questions like: What is the probability of being age 40? The answer is 0.015, indicating a 1.5% probability of being age 40.</p>
</section>
<section id="boxplot" class="level3">
<h3 class="anchored" data-anchor-id="boxplot">Boxplot</h3>
<p>A boxplot provides the five-number summary of a dataset: 1) Minimum: Represents the lowest value within the dataset, calculated as Q1 - 1.5 * IQR. 2) Interquartile Range (IQR): Measures the spread of the middle 50% of the data. 3) Q1 (25th Percentile): Represents the value below which 25% of the data falls. 4) Q3 (75th Percentile): Represents the value below which 75% of the data falls. 5) Maximum: Calculated as Q3 + 1.5 * IQR, it helps identify outliers or noise in the data.</p>
<p>Boxplots are valuable for visualizing the distribution of data and detecting outliers efficiently.</p>
<div id="52e67ff2" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">sns.boxplot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This graph aids in identifying outliers and determining the fifth number. For instance, ages above 65 are considered outliers. Additionally:</p>
<ul>
<li>75% of people are below the age of 38.</li>
<li>50% of people are below the age of 28.</li>
<li>25% of people are below the age of 20.</li>
</ul>
<div id="5f34e75b" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This can be verify by using this methods</span></span>
<span id="cb19-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>count    714.000000
mean      29.699118
std       14.526497
min        0.420000
25%       20.125000
50%       28.000000
75%       38.000000
max       80.000000
Name: Age, dtype: float64</code></pre>
</div>
</div>
</section>
</section>
<section id="extra-for-numerical" class="level2">
<h2 class="anchored" data-anchor-id="extra-for-numerical">Extra for Numerical</h2>
<section id="violin-plots" class="level3">
<h3 class="anchored" data-anchor-id="violin-plots">Violin Plots</h3>
<p>Violin plots are a method of plotting numeric data and can be considered a combination of the box plot and kernel density plot.</p>
<p>One advantage of the violin plot over the box plot is that, aside from displaying the five-number summary, it shows the entire distribution of the data. This allows for a more comprehensive understanding of the data distribution and facilitates comparison of the distribution of a given variable across different categories.</p>
<div id="120c405f" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">sns.violinplot(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cf99e5ac" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">PassengerId</th>
<th data-quarto-table-cell-role="th">Survived</th>
<th data-quarto-table-cell-role="th">Pclass</th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Sex</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">SibSp</th>
<th data-quarto-table-cell-role="th">Parch</th>
<th data-quarto-table-cell-role="th">Ticket</th>
<th data-quarto-table-cell-role="th">Fare</th>
<th data-quarto-table-cell-role="th">Cabin</th>
<th data-quarto-table-cell-role="th">Embarked</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>Braund, Mr. Owen Harris</td>
<td>male</td>
<td>22.0</td>
<td>1</td>
<td>0</td>
<td>A/5 21171</td>
<td>7.2500</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>1</td>
<td>1</td>
<td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
<td>female</td>
<td>38.0</td>
<td>1</td>
<td>0</td>
<td>PC 17599</td>
<td>71.2833</td>
<td>C85</td>
<td>C</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>1</td>
<td>3</td>
<td>Heikkinen, Miss. Laina</td>
<td>female</td>
<td>26.0</td>
<td>0</td>
<td>0</td>
<td>STON/O2. 3101282</td>
<td>7.9250</td>
<td>NaN</td>
<td>S</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>1</td>
<td>1</td>
<td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
<td>female</td>
<td>35.0</td>
<td>1</td>
<td>0</td>
<td>113803</td>
<td>53.1000</td>
<td>C123</td>
<td>S</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>Allen, Mr. William Henry</td>
<td>male</td>
<td>35.0</td>
<td>0</td>
<td>0</td>
<td>373450</td>
<td>8.0500</td>
<td>NaN</td>
<td>S</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="a86a98e5-991c-41c3-9116-fc78b1f614c7" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">sns.kdeplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>,hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="9f97b508-96e7-4219-9e9b-f12c3f6055cd" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">sns.kdeplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df,x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>,hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://nishchalbasyal.github.io/ai-blog/posts/Univariant Analysis/</guid>
  <pubDate>Sun, 05 May 2024 19:51:16 GMT</pubDate>
</item>
</channel>
</rss>
